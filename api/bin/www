#!/usr/bin/env node

/**
 * Module dependencies.
 */

var httpsApp = require('../app');
var httpApp = require('../app');
var debug = require('debug')('NeoRestApiService:server');
const siteConfig = require('../modules/config');
const https = require('https');
const http = require('http');
const fs = require('fs');

console.log(siteConfig)
/**
 * Create HTTPS server if enabled
 */
let httpsServerEnable = true;
if (siteConfig.SSL.key == undefined || siteConfig.SSL.cert == undefined || siteConfig.SSL.key == '' || siteConfig.SSL.cert == '')
  httpsServerEnable = false;

if (httpsServerEnable) {
  var httpsPort = normalizePort(siteConfig.serverPort.https);
  httpsApp.set('port', httpsPort);
  var key = fs.readFileSync(siteConfig.SSL.key);
  var cert = fs.readFileSync(siteConfig.SSL.cert);
  var options = {
    key: key,
    cert: cert
  };
  const httpsServer = https.createServer(options, httpsApp);
  httpsServer.listen(httpsPort);
  httpsServer.on('error', onError);
  httpsServer.on('listening', onListening);
}

/**
 * Get port from environment and store in Express.
 */
 var httpPort = normalizePort(siteConfig.serverPort.http);

 httpApp.set('port', httpPort);
/**
 * Create HTTP server.
 */
const httpServer = http.createServer(httpApp);
/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(httpPort);
httpServer.on('error', onError);
httpServer.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + httpsPort + " / " + httpPort
    : 'Port ' + httpsPort + " / " + httpPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  if (httpsServerEnable) {
    var httpsAddr = httpsServer.address();
    var httpsBind = typeof httpsAddr === 'string'
      ? 'pipe ' + httpsAddr
      : 'port ' + httpsAddr.port;
    debug('Listening on ' + httpsBind);
  }
  var httpAddr = httpServer.address();
  var httpBind = typeof httpAddr === 'string'
    ? 'pipe ' + httpAddr
    : 'port ' + httpAddr.port;
  debug('Listening on ' + httpBind);
}